/*V1：有一堆石子共有N个。A B两个人轮流拿，A先拿。每次最少拿1颗，最多拿K颗，拿到最后1颗石子的人获胜。假设A B都非常聪明，拿石子的过程中不会出现失误。给出N和K，问最后谁能赢得比赛。
例如N = 3，K = 2。无论A如何拿，B都可以拿到最后1颗石子。*/
#include<iostream>
using namespace std;

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
    int n,k;
    cin>>n>>k;
    if(n%(k+1)==0) cout<<"B"<<endl;
    else cout<<"A"<<endl;
    }
}

/*V2：有一堆石子共有N个。A B两个人轮流拿，A先拿。每次只能拿1，3，4颗，拿到最后1颗石子的人获胜。假设A B都非常聪明，拿石子的过程中不会出现失误。给出N，问最后谁能赢得比赛。
例如N = 2。A只能拿1颗，所以B可以拿到最后1颗石子。*/
#include<iostream>
#include<cstdio>
#include<algorithm>
#include<numeric>
#include<cstring>
using namespace std;

int main()
{
    int T;
    cin>>T;
    int n;
    while(T--)
    {
        cin>>n;
        if(n%7==0||n%7==2)
        {
            cout<<"B"<<endl;
        }
        else
        {
            cout<<"A"<<endl;
        }
    }

}

/*V3：有一堆石子共有N个。A B两个人轮流拿，A先拿。每次拿的数量只能是2的正整数次幂，比如(1,2,4,8,16....)，拿到最后1颗石子的人获胜。假设A B都非常聪明，拿石子的过程中不会出现失误。给出N，问最后谁能赢得比赛。
例如N = 3。A只能拿1颗或2颗，所以B可以拿到最后1颗石子。（输入的N可能为大数）*/
#include<iostream>
#include<cmath>
#include<stdio.h>
using namespace std;

int main()
{
    char c;
    //cout<<int(c);
    int T;cin>>T;char k=cin.get();
    while(T--)
    {
        int total=0;
        while ((c=cin.get())!= '\n')
        {
            total=total+int(c)-48;
        }
        if(total%3==0){
            cout<<'B'<<endl;
        }
        else
            cout<<'A'<<endl;
        }
}

/*V4：有一堆石子共有N个。A B两个人轮流拿，A先拿。每次拿的数量最少1个，最多不超过对手上一次拿的数量的2倍（A第1次拿时要求不能全拿走）。拿到最后1颗石子的人获胜。假设A B都非常聪明，拿石子的过程中不会出现失误。给出N，问最后谁能赢得比赛。
例如N = 3。A只能拿1颗或2颗，所以B可以拿到最后1颗石子。*/
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstring>
#include <map>
using namespace std;
typedef long long ll;
ll a[10005];
map<int,int>book;
const ll maxn=1e9;
int main()
{
    a[1]=1;a[2]=2;
    book[1]=1;book[2]=1;
    for(int i=3;a[i-1]<=maxn;i++)
    {
        a[i]=a[i-1]+a[i-2];
        book[a[i]]=1;
    }
    int t,n;
    cin>>t;
    while(t--) {
        cin>>n;
        if(book[n]) cout<<"B"<<endl;
        else cout<<"A"<<endl;
    }
    return 0;
}
